import paho.mqtt.client as mqtt
import RPi.GPIO as GPIO
import time

# Callback function to handle connection status
def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("Connected to MQTT broker")
    else:
        print("Connection failed")

# Callback function to handle publishing acknowledgements
def on_publish(client, userdata, mid):
    print("Message published")

# Callback function to handle incoming messages
def on_message(client, userdata, msg):
    message = msg.payload.decode("utf-8")
    if message == "System off":
        print("Received 'System off' command. Stopping...")
        client.loop_stop()
        GPIO.cleanup()
        exit()

# Assign callback functions
client = mqtt.Client("Broker")
client.on_connect = on_connect
client.on_publish = on_publish
client.on_message = on_message

topic_publish = "person_detection"
topic_subscribe = "computer_status"

client.connect("localhost", 1883)
client.subscribe(topic_subscribe)
client.loop_start()

# GPIO pins
trigger_pin = 2
echo_pin = 3

# Setup
GPIO.setmode(GPIO.BCM)
GPIO.setup(trigger_pin, GPIO.OUT)
GPIO.setup(echo_pin, GPIO.IN)

def get_distance():
    # Trigger ultrasonic sensor
    GPIO.output(trigger_pin, GPIO.HIGH)
    time.sleep(0.00001)
    GPIO.output(trigger_pin, GPIO.LOW)

    # Wait for the echo response
    while GPIO.input(echo_pin) == 0:
        pulse_start_time = time.time()

    while GPIO.input(echo_pin) == 1:
        pulse_end_time = time.time()

    # Calculate distance in centimeters
    pulse_duration = pulse_end_time - pulse_start_time
    speed_of_sound = 34300  # Speed of sound in cm/s
    distance = (pulse_duration * speed_of_sound) / 2

    return distance

try:
    while True:
        # Measure distance every 30 seconds
        for _ in range(30):
            distance = get_distance()
            # Set a threshold distance to determine if a person is in front
            threshold_distance = 10  # Adjust this value based on your requirements
            if distance < threshold_distance:
                client.publish("person_detection", "True")
            else:
                client.publish("person_detection", "False")
            time.sleep(1)
        # Cleanup GPIO pins
        GPIO.cleanup()
        # Wait before re-initializing the sensor
        time.sleep(5)
        # Re-initialize GPIO pins
        GPIO.setup(trigger_pin, GPIO.OUT)
        GPIO.setup(echo_pin, GPIO.IN)

except KeyboardInterrupt:
    print("Measurement stopped by the user.")
finally:
    GPIO.cleanup()
